plugins {
    id "io.spring.dependency-management" version "1.1.4"
    id 'java'
    id 'jacoco'
    id "com.github.node-gradle.node" version "2.2.1"
}

node {
    version = '20.11.0'
    npmVersion = '10.2.4'
    download = true
    workDir = file("${project.buildDir}/ui")
    nodeModulesDir = file("${project.rootDir}/ui")
}

npm_run_build {
    inputs.files fileTree("ui/src")
    inputs.file 'ui/package.json'
    inputs.file 'ui/package-lock.json'
    outputs.dir 'ui/build'
}

apply from: 'project-properties.gradle'
apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'

repositories {
    mavenLocal()
    mavenCentral { url "https://repo1.maven.org/maven2" }
    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:' + getProperty('bom.version') : 'com.epam.reportportal:commons-bom:5.12.1')
    }
}

dependencies {
    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation 'com.epam.reportportal:plugin-api'
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:a98c172'
        implementation 'com.github.reportportal:plugin-api:develop-SNAPSHOT'
        annotationProcessor 'com.github.reportportal:plugin-api:develop-SNAPSHOT'
    }

    implementation("com.slack.api:slack-api-client:1.27.1") {
        exclude group: "org.slf4j"
    }
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.required = true
    }
}

build.dependsOn jacocoTestReport

artifacts {
    archives shadowJar
}

generatePomFileForShadowPublication { pom.packaging = "jar" }

sourceSets {
    main {
        resources
                {
                    exclude '**'
                }
    }
}

jar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.slack.SlackPlugin",
                "Plugin-Service": "api"
        )
    }
}

shadowJar {
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    configurations = [project.configurations.compileClasspath]
    zip64 true
    dependencies {
    }
}

task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compileClasspath
    }
    archiveExtension.set('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn npm_run_build

